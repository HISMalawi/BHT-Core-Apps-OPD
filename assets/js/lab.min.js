var orders_table;
var selected_tests = {};
var VLresults = [];
var extended_lab = true;
var reset_lab;

/*var global_property = GlobalProperty({
  authToken: sessionStorage.authorization,
  path: apiProtocol + '://' + apiURL + ':' + apiPort + '/api/v1'
});

global_property.isEnabled('extended.labs', function (predicate) {
  
  if (predicate) {

   extended_lab = true; 

  }

}, function (error) {

  console.error(error);

})*/

function isExtendedLabs() {
    let url = sessionStorage.apiProtocol + "://" + sessionStorage.apiURL + ":" + sessionStorage.apiPort + "/api/v1";
    url += '/global_properties?property=extended.labs';

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obs = JSON.parse(this.responseText);
            if(obs){
                extended_lab  = (obs["extended.labs"] == 'false' ? false : true);
            }
        }
    };
    xhttp.open("GET", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send();
}

isExtendedLabs();



function activateDataTable() {
    orders_table = jQuery('#lab-orders').DataTable({
        fixedHeader: true,
        searching: false,
        scrollY: 500,
        order: [[3, 'DESC']],
        columnDefs: [
            {"className": "accession-numbers-col", "targets": 0},
            {"className": "tests-col", "targets": 1},
            {"className": "specimen-col", "targets": 2},
            {"className": "date-col", type: 'date',"targets": 3},
            {"className": "results-col", "targets": 4},
          ], 
        paging: false,
        scroller: {
            loadingIndicator: true
        }
    });
}

function changeCancelBTN() {
  var c = document.getElementById('cancelButton');
  var cancelAttributes = c.getAttribute('onmousedown');
  c.setAttribute('onmousedown', 'changeCancelBG();' + cancelAttributes);
}

function changeCancelBG() {
  var e = document.getElementById('messageBar');
  e.style = 'background-color: tomato; border-color: tomato;';
}

function buildLabOrderDisplay() {
    changeCancelBTN();
    var clearBTN = document.getElementById('clearButton');
    clearButton.style = 'display: none;';

    var f = document.getElementById('inputFrame' + tstCurrentPage);
    f.style = 'width: 96%; height: 88%;';

    var table = document.createElement('table');
    table.setAttribute('id', 'lab-orders');
    f.appendChild(table);

    var thead = document.createElement('thead');
    table.appendChild(thead);

    var tr = document.createElement('tr');
    thead.appendChild(tr);

    var heads = ['Accession#','Test name', 'Specimen', 'Ordered', 'Result'];
    for (var i = 0; i < heads.length; i++) {
        var th = document.createElement('th');
        th.innerHTML = heads[i];
        tr.appendChild(th);

        /*if (i == 1)
            th.setAttribute("class", "tracking-number-columns");

        if (i == 2)
            th.setAttribute("class", "status-columns");

        if (i == 0)
            th.setAttribute("class", "test-columns");

        if (i == 4)
            th.setAttribute("class", "results-columns");

        if (i == 3)
            th.setAttribute("class", "date-columns");

        if (i == 5)
            th.setAttribute("class", "date-columns");*/

    }
    activateDataTable();


    addCreateOrderBTN();
    fetchOrders();
}

function addCreateOrderBTN() {
    var root = document.getElementById('buttons');
    var order = document.createElement('button');
    if (sessionStorage.programID == 14) {
        order.setAttribute('onmousedown', 'redirectDraw()');
    } else {
        order.setAttribute('onmousedown', 'pressOrder();');
    }
    order.setAttribute('id', 'pressOrder');
    order.innerHTML = '<span>Order</span>';
    order.setAttribute('class', 'button blue navButton');
    root.appendChild(order);

    var nextButton = document.getElementById('nextButton');
    var nextButtonAttribute = nextButton.getAttribute('onmousedown');
    nextButton.setAttribute('onmousedown', "removeOrderButton();" + nextButtonAttribute);
}

function removeOrderButton() {
  var root = document.getElementById('buttons');
  var button = document.getElementById('pressOrder');
  root.removeChild(button);

}

function pressOrder() {
    if (extended_lab){
      // window.location.href = "/apps/ART/views/encounters/lab_order.html"
      // return;
    }
    var orderBox = document.createElement('div');
    orderBox.setAttribute('id', 'orders-box');

    var orderCover = document.createElement('div');
    orderCover.setAttribute('id', 'orders-cover');

    var container = document.createElement('div');
    container.setAttribute('id', 'orders-container');
    orderBox.appendChild(container);

    var orderNavBar = document.createElement('div');
    orderNavBar.setAttribute('id', 'orders-nav-bar');
    orderBox.appendChild(orderNavBar);

    var windowBody = document.getElementsByTagName('body')[0];
    try {
        var div1 = document.getElementById('orders-box');
        var div2 = document.getElementById('orders-cover');
        windowBody.removeChild(div1);
        windowBody.removeChild(div2);
    } catch (e) {
    }

    windowBody.appendChild(orderBox);
    windowBody.appendChild(orderCover);
    orderCover.style = 'display: inline;';
    orderBox.style = 'display: inline;';

    addNavButtons(orderNavBar);
    fetchAvailableTests();
}

function addNavButtons(ordersNavBar) {
    var nextB = document.createElement('button');
    nextB.innerHTML = '<span>Order test(s)</span>';
    nextB.setAttribute('class', 'button green navButton nav-orders-btns');
    nextB.setAttribute('onmousedown', 'createOrders(this);');
    nextB.setAttribute('id', 'next-button');
    ordersNavBar.appendChild(nextB);

    var cancelB = document.createElement('button');
    cancelB.innerHTML = '<span>Cancel order</span>';
    cancelB.style = 'float: left; left: 5px;';
    cancelB.setAttribute('class', 'button red navButton nav-orders-btns');
    cancelB.setAttribute('onmousedown', 'cancelLabOrder();');
    ordersNavBar.appendChild(cancelB);
}

function cancelLabOrder() {
    var windowBody = document.getElementsByTagName('body')[0];
    var div1 = document.getElementById('orders-box');
    var div2 = document.getElementById('orders-cover');
    windowBody.removeChild(div1);
    windowBody.removeChild(div2);

    try {
        var cover = document.getElementById('submit-cover');
        cover.style = 'display: none;';
    } catch (e) {
    }
    selected_tests_specimen_reason = {};
    selected_tests = {};
}

function displayT(tests) {
    var container = document.getElementById('orders-container');

    if (extended_lab){
      buildExtendedOrderDisplay(container, tests);
      return;
    }

    var div = document.createElement('div');
    divCSS = "height: 620px; width: 98%;";
    divCSS += "border: solid 1px; padding: 10px;";
    divCSS += "border-radius: 9px;";
    div.style = divCSS;
    container.appendChild(div);

    var cells = ['tests-left', 'tests-right'];
    for (var i = 0; i < cells.length; i++) {
        var cell = document.createElement('div');
        cellCSS = 'vertical-align: top;';
        var width = (i == 1 ? '50%;' : '45%;');
        cellCSS += 'height: 595px; width: ' + width;
        cellCSS += 'padding-left: 5px; overflow-x: hidden;';
        cell.style = cellCSS;
        cell.setAttribute('id', cells[i]);
        div.appendChild(cell);
    }
    addLefttable(tests);
    addMainReasonForTests();
}

function addMainReasonForTests() {
    var container = document.getElementById('tests-right');
    container.setAttribute('class', 'options');

    var div = document.createElement('div');
    div.style = 'text-align: center;border-style: solid;border-width: 0px 0px 1px 0px;';
    div.innerHTML = 'Main test(s) reason';
    container.appendChild(div);

    var ul = document.createElement('ul');
    ul.setAttribute('style', 'opacity: 0.4;');
    container.appendChild(ul);

    var reasons = ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'];
    for (var i = 0; i < reasons.length; i++) {
        var oddEven = (i & 1) ? "odd" : "even";

        var li = document.createElement('li');
        li.innerHTML = reasons[i];
        li.setAttribute('value', reasons[i]);
        li.setAttribute('reason', reasons[i]);
        li.setAttribute('id', i);
        li.setAttribute('class', 'test-reasons ' + oddEven);
        li.setAttribute('onmousedown', "selectReason(this);");
        ul.appendChild(li);
    }

    var selectedTestDisplay = document.createElement('div');
    selectedTestDisplay.setAttribute('id', 'selected-tests-display');
    selectedTestDisplay.innerHTML = '&nbsp;';
    container.appendChild(selectedTestDisplay);
}

function selectReason(e) {
    var reasonDIV = document.getElementById('tests-right');
    var UL = reasonDIV.getElementsByTagName('ul')[0];
    var cssStyle = UL.getAttribute('style');
    if (cssStyle.match(/opacity/i)) {
        showMessage('Select test before select reason');
        return;
    }

    var list = document.getElementsByClassName('test-reasons');
    for (var i = 0; i < list.length; i++) {
        list[i].style = 'background-color: "";';
    }

    e.style = 'background-color: lightblue;';
    for (var t in selected_tests) {
        if (selected_tests[t] == null) {
            selected_tests[t] = e.getAttribute('reason');
        }
    }

    disableReasons();
    enableTestDIV();
}

function addUntickBox(th, i) {
    var img = document.createElement('img')
    img.setAttribute('id', 'order-' + i);
    img.setAttribute('src', '/public/touchscreentoolkit/lib/images/unticked.jpg');
    img.style = 'width: 25px; height: 25px;';
    th.appendChild(img);
}

var all_available_tests = {};

function addLefttable(unsorted_tests) {
    let tests = []; let vl_test;

    for (var i = 0; i < unsorted_tests.sort().length; i++) {
        all_available_tests[unsorted_tests[i].name] = unsorted_tests[i].concept_id;

        if(unsorted_tests[i].name.match(/viral load/i)){
            vl_test = unsorted_tests[i];
            continue;
        }

        tests.push(unsorted_tests[i]);
    }

    if(vl_test != undefined)
        tests.splice(0,0,vl_test);

    var table = document.createElement('table');
    table.setAttribute('class', 'tests-tables');
    var container = document.getElementById('tests-left');
    container.appendChild(table);

    for (var i = 0; i < tests.length; i++) {
        var tr = document.createElement('tr');
        table.appendChild(tr);

        var td = document.createElement('td');
        /* .......... */
        var minTable = document.createElement('table');
        minTable.style = 'width: 100%;';
        var minTr = document.createElement('tr');
        minTable.appendChild(minTr);
        var minTH = document.createElement('th');
        minTH.style = "text-align: center; width: 5px;border-style: solid; border-width: 0px;";
        addUntickBox(minTH, tests[i].concept_id);
        minTr.appendChild(minTH);

        var minTD = document.createElement('td');
        minTD.innerHTML = tests[i].name;
        minTD.style = 'padding-left: 10px;';
        minTr.appendChild(minTD);

        td.appendChild(minTable);
        /* .......... */

        td.setAttribute('class', 'tests-containers');
        td.setAttribute('onmousedown', 'selectTest(this);');
        td.setAttribute('test-selected', 'false');
        td.setAttribute('id', 'test-' + tests[i].concept_id);
        tr.appendChild(td);
    }
}

function selectTest(e) {
    var selected = e.getAttribute('test-selected');
    var img = document.getElementById('order-' + e.id.split('-')[1]);
    var testDIV = document.getElementById('tests-left');
    var cssStyle = testDIV.getAttribute('style');
    if (cssStyle.match(/opacity/i)) {
        showMessage('Select test reason to continue');
        return;
    }


    if (selected == 'false') {
        e.style = 'background-color: lightblue;';
        e.setAttribute('test-selected', 'true');
        img.setAttribute('src', '/public/touchscreentoolkit/lib/images/ticked.jpg');

        testDIV.style = cssStyle += 'opacity: 0.4;';
        var selected = e.getElementsByTagName('td')[0];
        selected_tests[selected.innerHTML] = null;
        enableReasons();
        resetReasonSelection();
    } else {
        e.style = 'background-color: ""';
        e.setAttribute('test-selected', 'false');
        img.setAttribute('src', '/public/touchscreentoolkit/lib/images/unticked.jpg');
        disableReasons();
        var selected = e.getElementsByTagName('td')[0];
        removeTest(selected.innerHTML);
    }
}

function disableReasons() {
    var reasonDIV = document.getElementById('tests-right');
    var UL = reasonDIV.getElementsByTagName('ul')[0];
    UL.setAttribute('style', 'opacity: 0.4;');
    resetReasonSelection();
    displayReasons();
}

function enableReasons() {
    var reasonDIV = document.getElementById('tests-right');
    var UL = reasonDIV.getElementsByTagName('ul')[0];
    UL.setAttribute('style', '');
}


function enableTestDIV() {
    var testDIV = document.getElementById('tests-left');
    var css = "vertical-align: top;";
    css += "height: 595px;";
    css += "width: 45%;";
    css += "padding-left: 5px;";
    css += "overflow-x: hidden;";
    testDIV.setAttribute('style', css);
}

function disableTestDIV() {
    var testDIV = document.getElementById('tests-left');
    var css = testDIV.getAttribute('style');
    testDIV.setAttribute('style', css + "opacity: 0.4;");
}

function resetReasonSelection() {
    var list = document.getElementsByClassName('test-reasons');
    for (var i = 0; i < list.length; i++) {
        list[i].style = 'background-color: "";';
    }
}

function displayReasons() {
    var div = document.getElementById('selected-tests-display');
    div.innerHTML = null;

    var table = document.createElement('table');
    table.style = 'width: 99%;';
    div.appendChild(table);

    var tr = document.createElement('tr');
    table.appendChild(tr);

    var cells = ['Test', 'Reason',""];
    for (var i = 0; i < cells.length; i++) {
        var th = document.createElement('th');
        th.innerHTML = cells[i]
        tr.appendChild(th)
    }

    for (var test in selected_tests) {
        var tr = document.createElement('tr');
        table.appendChild(tr)

        var td = document.createElement('td');
        td.innerHTML = test;
        tr.appendChild(td)

        var td = document.createElement('td');
        td.innerHTML = selected_tests[test];
        tr.appendChild(td)

        var td = document.createElement('td');
        td.setAttribute("style","text-align: center;");
        td.setAttribute("onmousedown","removeSelectedTest('" +  test + "');");
        let img = document.createElement("img");
        img.setAttribute("style","height:40px;width:40px;")
        img.setAttribute("src","/assets/images/delete.png");
        td.appendChild(img);
        tr.appendChild(td)
    }
}

function removeTest(test) {
    var temp = selected_tests;
    selected_tests = {}
    for (var t in temp) {
        if (test == t)
            continue;

        selected_tests[t] = temp[t];
    }
    displayReasons();
}

/* ............................ */


function fetchAvailableTests() {
    var url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1";
    url += '/lab/test_types';

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obs = JSON.parse(this.responseText);
            displayT(obs);
        }
    };
    xhttp.open("GET", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send();
}

function createOrders(e) {
    //let valid_selection = true;
    if(extended_lab){
        createExtendedLabOrders(e);
        return
    }
    let not_selection_done = checkIsHashEmpty(selected_tests);

    if (not_selection_done == true) {
        showMessage("Select test(s) to continue");
        return;
    }

    for (var test in selected_tests) {
        if (selected_tests[test] == null) {
            showMessage('Add a test reason for ' + test);
            return
        }
    }

    processVLifSelected(e);
}

function processVLifSelected(e){
    e.setAttribute('onmousedown', '');
    var viral_load_selected = false;
    for(var test in selected_tests) {
      if(test.match(/viral load/i)){
        viral_load_selected = true;
        break;
      }
    }
    
    if(viral_load_selected && (Object.keys(vl_info).length > 0)){
      if(vl_info.skip_milestone == false && vl_info.eligibile == true){
        vlOrdered();
      }else{
        createOrderEncounter();
      }
    }else{
      createOrderEncounter();
    }
}

function createOrderEncounter() {
    var currentTime = moment().format(' HH:mm:ss');
    var encounter_datetime = moment(sessionStorage.sessionDate).format('YYYY-MM-DD');
    encounter_datetime += currentTime;

    var encounter = {
        encounter_type_name: 'LAB ORDERS',
        encounter_type_id: 57,
        patient_id: sessionStorage.patientID,
        encounter_datetime: encounter_datetime
    }

    let nextOrderFunction = (extended_lab == true ? "createExOrders" : "createLabOrders")
    submitParameters(encounter, "/encounters", nextOrderFunction);
}

function getTestReason(selected_reason){
    let reasons = {
        "Repeat / Missing": 9144,
        "Targeted": 3280,
        "Confirmatory": 1345,
        "Stat": 6368,
        "Routine": 432
    };

    return reasons[selected_reason];
}

var lab_orders_data = [];

function createLabOrders(encounter) {
    for (var test_name in selected_tests){
        let test_reason = getTestReason(selected_tests[test_name]);
        lab_orders_data.push({
            encounter_id: encounter.encounter_id,
            tests: [{concept_id: all_available_tests[test_name]}],
            reason_for_test_id: test_reason,
            target_lab: sessionStorage.currentLocation,
            date: moment(sessionStorage.sessionDate).format('YYYY-MM-DD'),
            requesting_clinician: sessionStorage.username
        });
    }

    postOrders({orders: lab_orders_data});
}

function postOrders(orders) {
    let url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1/lab/orders";
    let parametersPassed = JSON.stringify(orders);

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            cancelLabOrder();
            fetchOrders();
            if(extended_lab)
                printOrders(JSON.parse(this.responseText));
            
        }
    };
    xhttp.open("POST", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send(parametersPassed);
}

/*function postOrders(encounter, test, reason) {
    var url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1";
    url += '/programs/1/lab_tests/orders?patient_id=' + sessionStorage.patientID;

    var parameters = {
        encounter_id: encounter.encounter_id,
        test_types: [test],
        date: sessionStorage.sessionDate,
        reason: reason,
        requesting_clinician: sessionStorage.username
    };

    var parametersPassed = JSON.stringify(parameters);

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obs = JSON.parse(this.responseText);
            sortOrders(encounter);
        }
    };
    xhttp.open("POST", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send(parametersPassed);
}*/

function fetchOrders() {
    let url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1";
    url += "/lab/orders?patient_id=" + sessionStorage.patientID;

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obj = JSON.parse(this.responseText);
            updateOrderTable(obj);
        }
    };
    xhttp.open("GET", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send();
}

function updateOrderTable(orders) {
    orders_table.clear().draw();

    for (var x = 0; x < orders.length; x++) {
        let accession_number = orders[x].accession_number;
        let test_status = (orders[x].specimen.name == "Unknown" ? "N/A" : orders[x].specimen.name);
        let date_ordered = moment(orders[x].order_date).format('DD/MMM/YYYY');
        let tests = orders[x].tests;

        for(let i = 0; i <  tests.length; i++){
            let results = (tests[i].result ? tests[i].result : []);
            let results_arr = [];
            let result_date = '';

            for(let r = 0; r < results.length; r++) {
               result_date = (results[r].date == null ? "" : moment(results[r].date).format("DD/MMM/YYYY"));
               let name = results[r].indicator.name;
               let value = results[r].value;
               let value_modifier = results[r].value_modifier === '<' ? '&lt;' : results[r].value_modifier;
               results_arr.push(name +  "   "  + value_modifier + value);
            }

            orders_table.row.add([accession_number, tests[i].name, test_status,
                date_ordered, `<button onclick="getLimsResults('${accession_number}')" class='button blue navButton'>  <span>View</span></button>`]);
            orders_table.draw();
            
        }

        /*orders_table.row.add([ordered_tests.join("<br />"), accession_number, test_status,
            date_ordered, order_results.join("<br />")]).node().id = "lab-order-" + (x);
            //date_ordered, addResults(test_values, 'lab-order-' + (i + x))]).node().id = "lab-order-" + (i + x);
        orders_table.draw();
        addClasses((x));*/
    }
}

function addConfirmBTN(accession_number) {
  var span = document.createElement('span');
  var btn = document.createElement('button');
  btn.setAttribute('class','bootstrap-btns');
  btn.innerHTML = '<span>Results given</span>';
  btn.setAttribute('onmousedown','');
  span.appendChild(btn);
  return span.innerHTML;
}

function addResults(results, id) {
    var parameters = [];
    for (var i = 0; i < results.length; i++) {
        var indicator = results[i].indicator;
        var value = results[i].value;
        if (indicator == 'result_date') {
            indicator = 'Result date'
            value = "(" + moment(results[i].value).format('DD/MMM/YYYY') + ")";

        }
        
        if(value.match(/>|</)){
         value = value.replace('<', '&lt;');
         value = value.replace('>', '&gt;');
        }
        parameters.push(indicator + ": " + value);
    }
    
    if(parameters.join('#').match(/Viral load/i)) {
      var rdate = parameters[1].replace('Result date: ','')
      rdate = rdate.replace('(','');
      rdate = rdate.replace(')','');

      VLresults.push({
        results: parameters[0].replace('Viral Load: ',''), 
        result_date: rdate, row_id: id
      }); 
    }

    return parameters.join('<br />');
}

function addClasses(i) {
    var row = document.getElementById('lab-order-' + i);
    var td = row.getElementsByTagName("td")[1];
    td.setAttribute("class", "tracking-number-columns");

    td = row.getElementsByTagName("td")[2];
    td.setAttribute("class", "status-columns");

    td = row.getElementsByTagName("td")[0];
    td.setAttribute("class", "test-columns");

    td = row.getElementsByTagName("td")[4];
    td.setAttribute("class", "results-columns");

    td = row.getElementsByTagName("td")[3];
    td.setAttribute("class", "date-columns");

    var rowClass = row.getAttribute('class');
    row.setAttribute('class', rowClass + " lab-orders");
}

function checkIsHashEmpty(obj) {
  for(var key in obj) {
    if(obj.hasOwnProperty(key))
      return false;
    }
  return true;
}

function removeSelectedTest(test) {
    let el = $("test-" +  all_available_tests[test]);
    selectTest(el);
    if(extended_lab)
        removeSelectedTestSpecimenReason(test);

}

function removeSelectedTestSpecimenReason(test){
    let new_hash = {}
    for(let t in selected_tests_specimen_reason){
        if(t == test)
            continue;

        new_hash[t] = selected_tests_specimen_reason[test];
    }
    selected_tests_specimen_reason = new_hash;
}















function buildTestTable(unsorted_tests){
    let tableHTML = `<table class="tests-tables">`;
    let tests = []; let vl_test;

    for (var i = 0; i < unsorted_tests.sort().length; i++) {
        all_available_tests[unsorted_tests[i].name] = unsorted_tests[i].concept_id;

        if(unsorted_tests[i].name.match(/viral load/i)){
            vl_test = unsorted_tests[i];
            continue;
        }

        tests.push(unsorted_tests[i]);
    }

    if(vl_test != undefined)
        tests.splice(0,0,vl_test)
    
    for(let i = 0; i < tests.length; i++){

        tableHTML += `<tr>
            <td class="tests-containers" onmousedown="selectSpecimen(this);" 
            test-selected="false" id="test-${tests[i].concept_id}">
                <table style="width:100%;">
                    <tr>
                        <th style="text-align: center; width: 5px; border-style: solid; border-width: 0px;">
                        <img id="order-${tests[i].concept_id}" src="/public/touchscreentoolkit/lib/images/unticked.jpg" 
                        style="width: 25px; height: 25px;"></th>
                        <td style="padding-left: 10px;">${tests[i].name}</td>
                    </tr>
                </table>
            </td>
        </tr>`;
    }
    return (tableHTML + "</table>");
}

function addSpecimenSection(){
    return `<div style="text-align: center; border-style: solid; border-width: 0px 0px 1px;">Select specimen</div>
            <div style="width: 100%; background-color: white;height: 160px;overflow: auto;">
                <ul style="opacity: 0.4;padding-bottom: 10%;" id="specimen-list"></ul>
            </div>`;
}

function buildExtendedOrderDisplay(el, tests){
    let innerHTML = `<div style="height: 620px; width: 98%; border: 1px solid; padding: 10px; border-radius: 9px;">
        <div style="vertical-align: top; height: 595px; width: 45%; padding-left: 5px; overflow-x: hidden;" id="tests-left">
            ${buildTestTable(tests)}
        </div>`;

    innerHTML += `<div style="vertical-align: top; height: 595px; 
        width: 50%; padding-left: 5px; overflow-x: hidden;" id="tests-right" class="options">
            ${addSpecimenSection()}
            <div style="text-align: center; border-style: solid; border-width: 0px 0px 1px;">Main test(s) reason</div>
            <ul style="opacity: 0.4;height:135px;" id="reason-for-test">
                <li reason="Routine" id="0" class="test-reasons even" 
                onmousedown="addReason(this);" value="Routine">Routine</li>
                <li reason="Targeted" id="1" class="test-reasons odd" 
                onmousedown="addReason(this);" value="Targeted">Targeted</li>
                <li reason="Confirmatory" id="2" class="test-reasons even" 
                onmousedown="addReason(this);" value="Confirmatory">Confirmatory</li>
                <li reason="Stat" id="3" class="test-reasons odd" onmousedown="addReason(this);" value="Stat">Stat</li>
                <li reason="Repeat / Missing" id="4" class="test-reasons even" 
                onmousedown="addReason(this);" value="Repeat / Missing">Repeat / Missing</li>
            </ul>
            <div id="selected-tests-display">&nbsp;</div></div>
        </div>`;

    el.innerHTML = innerHTML;
}



function selectSpecimen(e) {
    var selected = e.getAttribute('test-selected');
    var img = document.getElementById('order-' + e.id.split('-')[1]);
    var testDIV = document.getElementById('tests-left');
    var cssStyle = testDIV.getAttribute('style');
    if (cssStyle.match(/opacity/i)) {
        showMessage('Select test reason to continue');
        return;
    }


    if (selected == 'false') {
        e.style = 'background-color: lightblue;';
        e.setAttribute('test-selected', 'true');
        img.setAttribute('src', '/public/touchscreentoolkit/lib/images/ticked.jpg');

        testDIV.style = cssStyle += 'opacity: 0.4;';
        var selected = e.getElementsByTagName('td')[0];
        selected_tests[selected.innerHTML] = null;
        //enableReasons();
        //resetReasonSelection();
        fetchSpecimen(selected.innerHTML, e.id.split('-')[1]);
    } else {
        e.style = 'background-color: ""';
        e.setAttribute('test-selected', 'false');
        img.setAttribute('src', '/public/touchscreentoolkit/lib/images/unticked.jpg');
        disableReasons();
        var selected = e.getElementsByTagName('td')[0];
        removeTest(selected.innerHTML);
    }
}

var selected_tests_specimen_reason = {};

function fetchSpecimen(test, test_id){
    let url = sessionStorage.apiProtocol + "://" + sessionStorage.apiURL + ":" + sessionStorage.apiPort + "/api/v1";
    url += '/lab/specimen_types?test_type=' + test;

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obs = JSON.parse(this.responseText);
            let list = "";
            let oddEven = "odd";

            let specimen_list = __$("specimen-list");
            for(let i = 0; i < obs.length; i++){
                oddEven = (oddEven == 'odd') ? "even" : "odd";
                list += `<li id="${i}" class="test-reasons ${oddEven}" 
                onmousedown="specimenSelected(this);" concept_id=${obs[i].concept_id} 
                test_name = "${test}" test_concept_id= "${test_id}" 
                value="${obs[i].name}">${obs[i].name}</li>`;
            }
            specimen_list.innerHTML = list;
            specimen_list.style.opacity = 1;
        }
    };
    xhttp.open("GET", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send();
}

function specimenSelected(e){
    let specimen_list = __$("specimen-list");
    if(specimen_list.style.opacity == 0.4)
        return;
    
    specimen_list.style.opacity = 0.4;

    selected_tests_specimen_reason[e.getAttribute("test_name")] = {
        specimen: e.getAttribute('value'),
        reason_for_test: null, reason_concept_id: null,
        test_concept_id: e.getAttribute("test_concept_id"),
        specimen_concept_id: e.getAttribute('concept_id')
    }

    let reasons = __$('reason-for-test');
    let lis = reasons.getElementsByTagName("li");
    for(let i = 0; i < lis.length; i++){
        lis[i].setAttribute("test_name", e.getAttribute("test_name"));
    }
    reasons.style.opacity = 1;
}

function addReason(e){
    let reason = __$('reason-for-test');
    if(reason.style.opacity == 0.4)
        return
    
    reason.style.opacity = 0.4
    selected_tests_specimen_reason[e.getAttribute('test_name')].reason_for_test = e.getAttribute("value");
    selected_tests_specimen_reason[e.getAttribute('test_name')].reason_concept_id = getTestReason(e.getAttribute("value"));
    displayExtendedReasons()
}

function displayExtendedReasons() {
    var div = document.getElementById('selected-tests-display');
    div.innerHTML = null;

    var table = document.createElement('table');
    table.style = 'width: 99%;';
    div.appendChild(table);

    var tr = document.createElement('tr');
    table.appendChild(tr);

    var cells = ['Test', 'Specimen', 'Reason',""];
    for (var i = 0; i < cells.length; i++) {
        var th = document.createElement('th');
        th.innerHTML = cells[i]
        tr.appendChild(th)
    }

    for (let test in selected_tests_specimen_reason) {
        let tr = document.createElement('tr');
        table.appendChild(tr)

        let td = document.createElement('td');
        td.innerHTML = test;
        tr.appendChild(td)

        td = document.createElement('td');
        td.innerHTML = selected_tests_specimen_reason[test].specimen;
        tr.appendChild(td)

        td = document.createElement('td');
        td.innerHTML = selected_tests_specimen_reason[test].reason_for_test;
        tr.appendChild(td)

        td = document.createElement('td');
        td.setAttribute("style","text-align: center;");
        td.setAttribute("onmousedown","removeSelectedTest('" +  test + "');");
        let img = document.createElement("img");
        img.setAttribute("style","height:40px;width:40px;")
        img.setAttribute("src","/assets/images/delete.png");
        td.appendChild(img);
        tr.appendChild(td)
    }
    let testsLeft = __$('tests-left');
    testsLeft.style.removeProperty('opacity');
}

function createExtendedLabOrders(e){
    let not_selection_done = checkIsHashEmpty(selected_tests_specimen_reason);

    if (not_selection_done == true) {
        showMessage("Select test(s) to continue");
        return;
    }

    for (var test in selected_tests_specimen_reason) {
        if (selected_tests_specimen_reason[test].reason_concept_id == null) {
            showMessage('Add a test reason for ' + test);
            return
        }
    }
    processVLifSelected(e);
}

function createExOrders(encounter) {
    let lab_orders_data = [];
    for (var test_name in selected_tests_specimen_reason){
        let test_obj = selected_tests_specimen_reason[test_name];

        lab_orders_data.push({
            encounter_id: encounter.encounter_id,
            specimen: {concept_id: test_obj.specimen_concept_id},
            tests: [{concept_id: test_obj.test_concept_id}],
            requesting_clinician: sessionStorage.username,
            target_lab: sessionStorage.currentLocation,
            date: moment(sessionStorage.sessionDate).format('YYYY-MM-DD'),
            reason_for_test_id: test_obj.reason_concept_id
          });
          
          
    }

    postOrders({orders: lab_orders_data});
}












function printOrders(orders){
    let order_ids = [];
    for(let i = 0; i < orders.length; i++){
        order_ids.push(orders[i].order_id);
    }

    let next_page;
    if(document.URL.match(/hiv_clinic_consultation/i)){
        next_page = 'hiv_clinic_consultation'
    }else{
        next_page = 'labs'
    }

    confirmCancelEntryWithMessage(null, "Do you want to print your last order?", `/views/print/order.html?order_ids=${order_ids.join(',')}&next_page=${next_page}`, true);
}

  function redirectOnFinishOrder() {
    //tempolay ridrect fix
    if(sessionStorage.saveState == 'true') {
        window.location.href = '/apps/OPD/views/encounters/presenting_complaints.html'; 
    } else {
        window.location = "/views/patient_dashboard.html?patient_id=" + sessionStorage.patientID;
    };
}
function redirectDraw() {
    window.location.href = '/apps/OPD/views/encounters/draw.html';
}